{{- $L := (datasource "language") -}}

{{- define "INLINE_FILE" -}}
RUN mkdir -p "{{ path.Dir .path }}" && echo "{{ .content | base64.Encode }}" | base64 -d > "{{ .path }}" && chmod {{ if eq .type "script" }}+rx{{ else }}+r{{ end }} "{{ .path }}"
{{- end -}}

{{- if has $L.devcontainer "build" }}

{{- $from := env.Getenv "BASE_IMAGE" -}}

{{- $remoteUser := $L.devcontainer.remoteUser -}}

{{- $packages := coll.Slice -}}
{{- if has $L.devcontainer.build "packages" -}}
  {{- $packages = (coll.Append $packages $L.devcontainer.build.packages) | coll.Flatten -}}
{{- end -}}

{{- $prepareBuildArgs := coll.Slice -}}
{{- $rootBuildArgs := coll.Slice -}}
{{- $userBuildArgs := coll.Slice -}}
{{- if has $L.devcontainer.build "args" -}}
  {{- range $arg, $v := $L.devcontainer.build.args -}}
    {{- if and (has $L.devcontainer.build "prepare")
               ($L.devcontainer.build.prepare | strings.Contains $arg) -}}
      {{- $prepareBuildArgs = coll.Append $arg $prepareBuildArgs -}}
    {{- else if and (has $L.devcontainer.build "root")
               ($L.devcontainer.build.root | strings.Contains $arg) -}}
      {{- $rootBuildArgs = coll.Append $arg $rootBuildArgs -}}
    {{- else if and (has $L.devcontainer.build "user")
               ($L.devcontainer.build.user | strings.Contains $arg) -}}
      {{- $userBuildArgs = coll.Append $arg $userBuildArgs -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- $rootFiles := coll.Slice -}}
{{- $userFiles := coll.Slice -}}
{{- if has $L.devcontainer.build "files" -}}
  {{- range $L.devcontainer.build.files -}}
    {{- if strings.Contains "HOME" . -}}
      {{ $userFiles = $userFiles | coll.Append (tmpl.Exec "INLINE_FILE" .) }}
    {{- else -}}
      {{ $rootFiles = $rootFiles | coll.Append (tmpl.Exec "INLINE_FILE" .) }}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- $insertHome := or $userFiles (and (has $L.devcontainer.build "user") ($L.devcontainer.build.user | strings.Contains "HOME")) -}}

{{- "" -}}
FROM {{ $from }}
{{ "" }}

{{- if and
    (not (strings.Contains "ghcr.io/dhhyi/dcc-base" $from))
    (or ($prepareBuildArgs) ($packages) ($rootBuildArgs)
        (has $L.devcontainer.build "root")) }}
USER root
{{ end }}

{{- if $prepareBuildArgs }}
{{- range $prepareBuildArgs }}
ARG {{ . }}
{{- end }}
{{ end }}

{{- if has $L.devcontainer.build "prepare" }}
{{ conv.Join $L.devcontainer.build.prepare "\n" }}
{{ end }}

{{- if $packages }}
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends {{ conv.Join $packages " " }} && apt-get clean && rm -rf /var/lib/apt/lists/*
{{ end }}

{{- if $rootBuildArgs }}
{{- range $rootBuildArgs }}
ARG {{ . }}
{{- end }}
{{ end }}

{{- if has $L.devcontainer.build "root" }}
{{ conv.Join $L.devcontainer.build.root "\n" }}
{{ end }}

{{- if $rootFiles }}
{{ conv.Join $rootFiles "\n" }}
{{ end }}

{{- "" }}
USER {{ $remoteUser }}
{{ "" }}

{{- if $insertHome -}}
ENV HOME=/home/{{ $remoteUser }}
{{ end }}

{{- if $userBuildArgs }}
{{- range $userBuildArgs }}
ARG {{ . }}
{{- end }}
{{ end }}

{{- if has $L.devcontainer.build "user" }}
{{ conv.Join $L.devcontainer.build.user "\n" }}
{{ end }}

{{- if $userFiles }}
{{ conv.Join $userFiles "\n" }}
{{ end }}

{{- end -}}
