{{- $L := (datasource "language") -}}

{{- $remoteUser := $L.devcontainer.remoteUser -}}

{{- $from := $L.devcontainer.build.base -}}

{{- $packages := coll.Slice -}}
{{- if has $L.devcontainer.build "packages" -}}
  {{- $packages = (coll.Append $packages $L.devcontainer.build.packages) | coll.Flatten -}}
{{- end -}}

{{- $insertHome := and (has $L.devcontainer.build "user") ($L.devcontainer.build.user | strings.Contains "HOME") -}}

{{- $fromArgs := coll.Slice -}}
{{- $prepareBuildArgs := coll.Slice -}}
{{- $rootBuildArgs := coll.Slice -}}
{{- $userBuildArgs := coll.Slice -}}
{{- if has $L.devcontainer.build "args" -}}
  {{- range $arg, $v := $L.devcontainer.build.args -}}
    {{- if and ($from | strings.Contains $arg) -}}
      {{- $fromArgs = coll.Append $arg $fromArgs -}}
    {{- else if and (has $L.devcontainer.build "prepare")
               ($L.devcontainer.build.prepare | strings.Contains $arg) -}}
      {{- $prepareBuildArgs = coll.Append $arg $prepareBuildArgs -}}
    {{- else if and (has $L.devcontainer.build "root")
               ($L.devcontainer.build.root | strings.Contains $arg) -}}
      {{- $rootBuildArgs = coll.Append $arg $rootBuildArgs -}}
    {{- else if and (has $L.devcontainer.build "user")
               ($L.devcontainer.build.user | strings.Contains $arg) -}}
      {{- $userBuildArgs = coll.Append $arg $userBuildArgs -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- if not (env.Getenv "SIMPLE_IMAGE" "") }}

{{- if $fromArgs -}}
{{- range $fromArgs -}}
ARG {{ . }}
{{ end }}
{{ end }}

{{- "" -}}
FROM {{ $from }}
{{ "" }}

{{- if $prepareBuildArgs }}
{{- range $prepareBuildArgs }}
ARG {{ . }}
{{- end }}
{{ end }}

{{- if has $L.devcontainer.build "prepare" }}
{{ conv.Join $L.devcontainer.build.prepare "\n" }}
{{ end }}

{{- if $packages }}
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends \
    {{ conv.Join $packages " " }} \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
{{ end }}

{{- if $rootBuildArgs }}
{{- range $rootBuildArgs }}
ARG {{ . }}
{{- end }}
{{ end }}

{{- if has $L.devcontainer.build "root" }}
{{ conv.Join $L.devcontainer.build.root "\n" }}
{{ end }}

{{- "" }}
COPY selftest.sh /
RUN chmod +x /selftest.sh
{{ "" }}

{{- "" }}
USER {{ $remoteUser }}
{{ "" }}

{{- if $insertHome -}}
ENV HOME=/home/{{ $remoteUser }}
{{ end }}

{{- if $userBuildArgs }}
{{- range $userBuildArgs }}
ARG {{ . }}
{{- end }}
{{ end }}

{{- if has $L.devcontainer.build "user" }}
{{ conv.Join $L.devcontainer.build.user "\n" }}
{{ end }}

{{- "" }}
RUN echo 'export PS1="$ "' >> $HOME/.bashrc && echo '\nexport PS1="$ "' >> $HOME/.zshrc

{{- $command := slice -}}
{{- if has $L.language "binary" -}}
  {{- $command = coll.Append $L.language.binary $command -}}
  {{- if has $L.language "binaryArgs" -}}
    {{- $command = coll.Append $L.language.binaryArgs $command -}}
  {{- end -}}
{{- end -}}
{{- $version := slice -}}
{{- if or (not (has $L.language "version")) ($L.language.version) -}}
  {{- if (has $L.language "version") }}
    {{- range split ($L.language.version | strings.TrimSpace) "\n" }}
      {{- $version = coll.Append . $version -}}
    {{- end -}}
  {{- else if (has $L.language "binary") }}
    {{- $version = coll.Append (conv.Join (slice $L.language.binary "--version")  " ") $version -}}
  {{- end -}}
{{- end -}}
{{- "" }}
ENV DCC_BINARY="{{ conv.Join $command " " }}" DCC_REPL="{{  if has $L.language "repl" }}{{ $L.language.repl }}{{ end }}" DCC_VERSION="{{ conv.Join $version ";" }}"

{{- end }}
